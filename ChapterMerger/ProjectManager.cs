/*
 * 
This file is part of the ChapterMerger project
Copyright (C) 2015 Mon C.A.S.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 * 
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using System.Xml.Serialization;
using System.Windows.Forms;

namespace ChapterMerger
{

  /// <summary>
  /// Holds all useful data regarding the Current Project.
  /// </summary>
  public class ProjectManager
  {

  /// <summary>
  /// Project File Name.
  /// </summary>
    public string projectFileName { get; set; }

  /// <summary>
  /// Holds a list of arguments added during runtime.
  /// </summary>
    public List<string> argumentList = new List<string>();

  /// <summary>
  /// Holds the configuration.
  /// </summary>
    public Configure configuration;

  /// <summary>
  /// Optional. Holds the Analyze object.
  /// </summary>
    public Analyze analyze = new Analyze();

    public ProjectManager()
    {

    }

  /// <summary>
  /// Custom constructor - sets a Configure object initially
  /// </summary>
  /// <param name="configure"></param>
    public ProjectManager(Configure configure)
    {
      this.configuration = configure;
    }

  /// <summary>
  /// Opens a previously saved ProjectManager object through xml deserialization.
  /// </summary>
  /// <param name="projectFile">The project file to be loaded.</param>
    public static ProjectManager openProject(string projectFile)
    {

      XmlSerializer xmlRead = new XmlSerializer(typeof(ProjectManager));

      ProjectManager project;

      using (FileStream fileStream = new FileStream(projectFile, FileMode.Open))
      {
        project = (ProjectManager)xmlRead.Deserialize(fileStream);
      }

      Config.setConfiguration(project.configuration);
      return project;
     
    }

  /// <summary>
  /// Saves this ProjectManager as a file.
  /// </summary>
  /// <param name="projectFile">The path of the project file for saving.</param>
    public void saveProject(string projectFile)
    {

      //Serialize the ProjectManager first to an XML Writer then append changes.
      XDocument xdoc = new XDocument();

      using (XmlWriter writer = xdoc.CreateWriter())
      {
        XmlSerializer xmlWrite = new XmlSerializer(typeof(ProjectManager));
        xmlWrite.Serialize(writer, this);
      }

      List<Object> comments = new List<Object> { 
        new XComment("ChapterMerger Project File."),
        new XComment("DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU'RE DOING.")
      };

      xdoc.Element("ProjectManager").AddBeforeSelf(comments);

      if (!Config.Configure.projectIncludeFileList)
        xdoc.Element("ProjectManager").Element("analyze").Remove();

      //Save the XML file.
      xdoc.Save(projectFile);

    }

  /// <summary>
  /// Clears the projectManager of any file data.
  /// </summary>
    public void ClearProject()
    {
      this.projectFileName = "";
      this.argumentList.Clear();
      /*
      if (this.analyze.fileLists.Count > 0)
        this.analyze.fileLists.Clear();
      this.analyze.hasOrdered = false;
       * */
      this.analyze = null;
    }
  }
}
